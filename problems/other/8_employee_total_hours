From the below data, find the total hours employee was inside office.

Input —
emp_id| punch_time|flag
11114|1900–01–01 08:30:00| I
11114|1900–01–01 10:30:00| O
11114|1900–01–01 11:30:00| I
11114|1900–01–01 15:30:00| O
11115|1900–01–01 09:30:00| I
11115|1900–01–01 17:30:00| O

Solution 1
import datetime
from pyspark.sql.types import StructType, StructField, TimestampType, LongType, StringType
from pyspark.sql import SparkSession
from pyspark.sql.window import Window
from pyspark.sql.functions import *

spark = SparkSession.builder \
    .appName("TotalInTime") \
    .getOrCreate()

_data = [
    (11114, datetime.datetime.strptime('08:30:00.00', "%H:%M:%S.%f"), "I"),
    (11114, datetime.datetime.strptime('10:30:00.00', "%H:%M:%S.%f"), 'O'),
    (11114, datetime.datetime.strptime('11:30:00.00', "%H:%M:%S.%f"), 'I'),
    (11114, datetime.datetime.strptime('15:30:00.00', "%H:%M:%S.%f"), 'O'),
    (11115, datetime.datetime.strptime('09:30:00.00', "%H:%M:%S.%f"), 'I'),
    (11115, datetime.datetime.strptime('17:30:00.00', "%H:%M:%S.%f"), 'O')
]

# Schema
_schema = StructType([
    StructField('emp_id', LongType(), True),
    StructField('punch_time', TimestampType(), True),
    StructField('flag', StringType(), True)
])

df = spark.createDataFrame(data=_data, schema=_schema)

window_agg = Window.partitionBy('emp_id').orderBy(col('punch_time'))

df = df.withColumn('prev_time', lag(col('punch_time')).over(window_agg))

df = df.withColumn('time_diff', (col('punch_time').cast('long') - col('prev_time').cast('long'))/3600)

df = df.groupBy('emp_id').agg(sum(when(col('flag') == 'O', col('time_diff')).otherwise(0)).alias('total_time'))
print(df.show())


Solution 2
from pyspark.sql import SparkSession
from pyspark.sql.functions import col, lag, when, datediff, hours

# Create a SparkSession
spark = SparkSession.builder.appName("TotalHoursInside").getOrCreate()

# Read the data from the CSV file
df = spark.read.format("csv").load("employee_data.csv", header=True, inferSchema=True)

# Convert the punch_time column to timestamp format
df = df.withColumn("punch_time", col("punch_time").cast("timestamp"))

# Sort the data by emp_id and punch_time
df = df.orderBy("emp_id", "punch_time")

# Create a new column to identify entry and exit times
df = df.withColumn("in_out", when(col("flag") == "I", "in").otherwise("out"))

# Calculate the time difference between consecutive entries and exits for each employee
df = df.withColumn("time_diff", 
                   when(col("in_out") == "out", 
                        datediff(col("punch_time"), lag("punch_time").over(Window.partitionBy("emp_id").orderBy("punch_time"))))
                   )
)

# Calculate the total hours for each employee
df = df.groupBy("emp_id").agg(sum("time_diff").alias("total_hours"))

# Show the result
df.show()
